// See https://aka.ms/new-console-template for more information
using UndertaleModLib;
using UndertaleModLib.Models;
using UndertaleModLib.Util;
using WYSDumper;

static string CreateSpriteYY(string img, string sprite_name, int xof, int yof, uint width, uint height)
{
    string yeah = Constants.SpriteYYTemplate;
    yeah = yeah.Replace("#image#", img);
    yeah = yeah.Replace("#sprite#", sprite_name);
    yeah = yeah.Replace("#xor#", xof.ToString());
    yeah = yeah.Replace("#yor#", yof.ToString());
    yeah = yeah.Replace("#width#", width.ToString());
    yeah = yeah.Replace("#height#", height.ToString());
    return yeah;
}

string current_yyp = Constants.ProjectYYTemplate;


string fileName = "";

string export_folder = "";

UndertaleData data = null;


if (args.Length != 0)
{
    fileName = args[0];
}
else
{

    Console.WriteLine("Please type out the file name of the data.win file you want to use.");
    fileName = Console.ReadLine();
    export_folder = Console.ReadLine();
}

try
{

    FileStream strm = File.OpenRead(fileName);
    data = UndertaleIO.Read(strm);
    strm.Close();

}
catch (Exception E)
{
    Console.WriteLine("Encountered an error while reading the file: " + E.Message);
    
    return 1;
}

TextureWorker worker = new TextureWorker();


string sprites_dir = Path.Combine(export_folder, "sprites");

string objects_dir = Path.Combine(export_folder, "objects");

Directory.CreateDirectory(sprites_dir);

Directory.CreateDirectory(objects_dir);


foreach (UndertaleGameObject item in data.GameObjects)
{
    if (item.Sprite != null)
    {
        if (item.Sprite.Textures.Count != 0)
        {
            string sprite_dir = Path.Combine(sprites_dir, item.Sprite.Name.Content);
            string weird_layers_folder = Path.Combine(sprite_dir, "layers", item.Sprite.Name.Content);
            if (!Directory.Exists(weird_layers_folder))
            {
                Console.WriteLine(item.Name.Content + " does have a sprite (" + item.Sprite.Name.Content + ")");
                Directory.CreateDirectory(weird_layers_folder);
                worker.ExportAsPNG(item.Sprite.Textures[0].Texture, Path.Combine(sprite_dir, item.Sprite.Name.Content + "_img.png"));
                worker.ExportAsPNG(item.Sprite.Textures[0].Texture, Path.Combine(weird_layers_folder, item.Sprite.Name.Content + "_img.png"));
                string yyc = CreateSpriteYY(item.Sprite.Name.Content + "_img", item.Sprite.Name.Content, item.Sprite.OriginX, item.Sprite.OriginY, item.Sprite.Width, item.Sprite.Height);
                File.WriteAllText(Path.Combine(sprite_dir, $"{item.Sprite.Name.Content}.yy"), yyc);
                current_yyp = current_yyp.Replace("#INJECT#",Constants.ProjectStringEntry.Replace("#sprite#",item.Sprite.Name.Content) + "\n#INJECT#");
            }
            else
            {
                Console.WriteLine(item.Name.Content + " has a sprite but it already exists.");
            }
        }
    }
    else
    {
        Console.WriteLine(item.Name.Content + " has no sprite.");
    }
}

Console.WriteLine("Writing Project...");
File.WriteAllText(Path.Combine(export_folder, "WYSEmpty.yyp"),current_yyp.Replace("#INJECT#",""));





return 0;
